from ninja import NinjaAPI, Schema
from ninja.errors import HttpError
import pygeohash as pgh
from django.http import HttpResponse
from .auth import get_supabase_client

api = NinjaAPI()


class LocationIn(Schema):
    lat: float
    lng: float
    name: str = "New Location"


class LocationOut(Schema):
    status: str
    geohash: str
    location: dict
    map_url: str = None


@api.delete("/location/{location_id}")
def delete_location(request, location_id: int):
    """Delete a location by ID"""
    from .models import Location

    try:
        location = Location.objects.get(id=location_id)
        location.delete()
        return {"status": "success", "message": f"Location {location_id} deleted"}
    except Location.DoesNotExist:
        raise HttpError(404, "Location not found")


@api.post("/location/add", response=LocationOut)
def add_location(request, payload: LocationIn):
    """Add a new location with geohash generation"""
    from .models import Location

    # Create and save location to database
    location = Location.objects.create(
        lat=payload.lat,
        lng=payload.lng,
        name=payload.name
    )
    # geohash auto-generated by model's save() method

    return {
        'status': 'success',
        'geohash': location.geohash,
        'location': {
            'lat': location.lat,
            'lng': location.lng,
            'name': location.name
        },
        'map_url': '/map/'  # URL to view the map
    }


@api.get("/locations/nearby")
def get_nearby_facilities(request, lat: float, lng: float, radius: int = 300):
    """Get facilities near coordinates"""
    # Convert radius to appropriate precision
    # 300m â‰ˆ precision 7
    area_hash = pgh.encode(lat, lng, precision=7)

    # Query DB with geohash prefix for efficiency
    # facilities = db.query(
    #     "SELECT * FROM facilities WHERE geohash LIKE $1",
    #     f"{area_hash}%"
    # )

    # Filter by exact distance
    results = []
    # for facility in facilities:
    #     distance = pgh.geohash_approximate_distance(
    #         pgh.encode(lat, lng, 9),
    #         facility.geohash
    #     )
    #     if distance <= radius:
    #         results.append({**facility, 'distance': distance})

    return sorted(results, key=lambda x: x.get('distance', 0))


@api.post("/report/create")
def create_report(request, lat: float, lng: float, facility_id: int):
    """Create report with duplicate detection"""
    # Check for duplicates
    report_hash = pgh.encode(lat, lng, precision=9)

    # existing = db.query(
    #     """SELECT * FROM reports
    #        WHERE facility_id = $1
    #        AND created_at > NOW() - INTERVAL '1 hour'""",
    #     facility_id
    # )

    # for report in existing:
    #     distance = pgh.geohash_approximate_distance(
    #         report_hash,
    #         pgh.encode(report.lat, report.lng, 9)
    #     )
    #     if distance < 50:  # Within 50m
    #         raise HttpError(400, "Duplicate report detected")

    # Create report...
    return {"status": "created"}


# Supabase endpoints
@api.get("/supabase/{table_name}")
def get_supabase_table(request, table_name: str):
    """Get all data from a Supabase table"""
    supabase = get_supabase_client()
    response = supabase.table(table_name).select('*').execute()
    return {"data": response.data, "count": len(response.data)}


@api.get("/supabase/{table_name}/{row_id}")
def get_supabase_row(request, table_name: str, row_id: int):
    """Get a specific row from Supabase table by ID"""
    supabase = get_supabase_client()
    response = supabase.table(table_name).select('*').eq('id', row_id).execute()

    if not response.data:
        raise HttpError(404, "Row not found")

    return {"data": response.data[0]}