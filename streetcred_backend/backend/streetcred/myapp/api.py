from ninja import NinjaAPI, Schema
from ninja.errors import HttpError
import pygeohash as pgh
from django.http import HttpResponse
from .auth import get_supabase_client

api = NinjaAPI(
    title="StreetCred API",
    description="API for location-based civic engagement",
    version="1.0.0",
    docs_url="/docs",
    openapi_url="/openapi.json"
)


class LocationIn(Schema):
    """Schema for creating a new location"""
    lat: float
    lon: float
    name: str = "New Location"

    class Config:
        schema_extra = {
            "example": {
                "lat": 37.7749,
                "lon": -122.4194,
                "name": "San Francisco City Hall"
            }
        }


class LocationOut(Schema):
    """Schema for location response"""
    status: str
    geohash: str
    location: dict
    map_url: str = None


@api.get("/locations", tags=["Locations"], summary="Get all locations")
def get_all_locations(request):
    """
    Get all locations from the database.

    Returns a list of all locations ordered by most recent first.
    """
    from .models import Location

    locations = Location.objects.all().order_by('-created_at')

    return {
        "count": locations.count(),
        "locations": [
            {
                "id": loc.id,
                "name": loc.name,
                "lat": loc.lat,
                "lon": loc.lon,  # lng from database -> lon in API response
                "geohash": loc.geohash,
                "created_at": loc.created_at.isoformat(),
            }
            for loc in locations
        ]
    }


@api.delete("/location/{location_id}", tags=["Locations"], summary="Delete location")
def delete_location(request, location_id: int):
    """
    Delete a location by its ID.

    Args:
        location_id: The ID of the location to delete
    """
    from .models import Location

    try:
        location = Location.objects.get(id=location_id)
        location.delete()
        return {"status": "success", "message": f"Location {location_id} deleted"}
    except Location.DoesNotExist:
        raise HttpError(404, "Location not found")


@api.post("/location/add", response=LocationOut, tags=["Locations"], summary="Add new location")
def add_location(request, payload: LocationIn):
    """
    Add a new location with automatic geohash generation.

    The location will be saved to the database and a geohash will be
    automatically generated for spatial queries.
    """
    from .models import Location

    # Create and save location to database
    location = Location.objects.create(
        lat=payload.lat,
        lng=payload.lon,  # lon from API -> lng in database
        name=payload.name
    )
    # geohash auto-generated by model's save() method

    return {
        'status': 'success',
        'geohash': location.geohash,
        'location': {
            'lat': location.lat,
            'lon': location.lng,  # lng from database -> lon in API response
            'name': location.name
        },
        'map_url': '/map/'  # URL to view the map
    }


@api.get("/locations/nearby")
def get_nearby_facilities(request, lat: float, lon: float, radius: int = 300):
    """Get facilities near coordinates"""
    # Convert radius to appropriate precision
    # 300m â‰ˆ precision 7
    area_hash = pgh.encode(lat, lon, precision=7)

    # Query DB with geohash prefix for efficiency
    # facilities = db.query(
    #     "SELECT * FROM facilities WHERE geohash LIKE $1",
    #     f"{area_hash}%"
    # )

    # Filter by exact distance
    results = []
    # for facility in facilities:
    #     distance = pgh.geohash_approximate_distance(
    #         pgh.encode(lat, lng, 9),
    #         facility.geohash
    #     )
    #     if distance <= radius:
    #         results.append({**facility, 'distance': distance})

    return sorted(results, key=lambda x: x.get('distance', 0))


@api.post("/report/create")
def create_report(request, lat: float, lon: float, facility_id: int):
    """Create report with duplicate detection"""
    # Check for duplicates
    report_hash = pgh.encode(lat, lon, precision=9)

    # existing = db.query(
    #     """SELECT * FROM reports
    #        WHERE facility_id = $1
    #        AND created_at > NOW() - INTERVAL '1 hour'""",
    #     facility_id
    # )

    # for report in existing:
    #     distance = pgh.geohash_approximate_distance(
    #         report_hash,
    #         pgh.encode(report.lat, report.lng, 9)
    #     )
    #     if distance < 50:  # Within 50m
    #         raise HttpError(400, "Duplicate report detected")

    # Create report...
    return {"status": "created"}


# Supabase endpoints
@api.get("/supabase/{table_name}")
def get_supabase_table(request, table_name: str):
    """Get all data from a Supabase table"""
    supabase = get_supabase_client()
    response = supabase.table(table_name).select('*').execute()
    return {"data": response.data, "count": len(response.data)}


@api.get("/supabase/{table_name}/{row_id}")
def get_supabase_row(request, table_name: str, row_id: int):
    """Get a specific row from Supabase table by ID"""
    supabase = get_supabase_client()
    response = supabase.table(table_name).select('*').eq('id', row_id).execute()

    if not response.data:
        raise HttpError(404, "Row not found")

    return {"data": response.data[0]}


@api.get("/debug/hydrants")
def debug_hydrants(request):
    """Debug endpoint to check hydrants data"""
    try:
        supabase = get_supabase_client()
        response = supabase.table('hydrants').select('*').execute()

        return {
            "success": True,
            "count": len(response.data),
            "sample": response.data[:3] if response.data else [],
            "all_data": response.data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "error_type": type(e).__name__
        }